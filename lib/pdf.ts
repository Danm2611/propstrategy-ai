import puppeteer from 'puppeteer'

export async function generatePDF(html: string, reportData: any): Promise<Buffer> {
  try {
    // Try system Chrome first, fallback to bundled Chromium
    let executablePath = process.env.PUPPETEER_EXECUTABLE_PATH
    
    if (!executablePath) {
      // Try common Chrome locations
      const chromePaths = [
        '/usr/bin/google-chrome-stable',
        '/usr/bin/google-chrome',
        '/usr/bin/chromium-browser',
        '/usr/bin/chromium'
      ]
      
      for (const path of chromePaths) {
        try {
          const fs = await import('fs')
          if (fs.existsSync(path)) {
            executablePath = path
            break
          }
        } catch (e) {
          // Continue to next path
        }
      }
    }

    const browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--single-process',
        '--disable-gpu'
      ],
      executablePath,
    })

  try {
    const page = await browser.newPage()

    // Create a complete HTML document with styling
    const fullHtml = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Property Analysis Report - ${reportData.propertyAddress}</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      font-size: 11pt;
      line-height: 1.6;
      color: #333;
      background: white;
    }

    .header {
      background: linear-gradient(135deg, #0066cc 0%, #004499 100%);
      color: white;
      padding: 40px;
      margin-bottom: 30px;
      display: flex;
      align-items: center;
      gap: 20px;
    }
    
    .header .logo {
      width: 60px;
      height: 60px;
      border-radius: 8px;
    }

    .header h1 {
      font-size: 28pt;
      margin-bottom: 10px;
      font-weight: 700;
    }

    .header .subtitle {
      font-size: 14pt;
      opacity: 0.9;
    }

    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 0 40px 40px;
    }

    h2 {
      color: #0066cc;
      font-size: 18pt;
      margin-top: 30px;
      margin-bottom: 15px;
      border-bottom: 2px solid #e5e5e5;
      padding-bottom: 5px;
    }

    h3 {
      font-size: 14pt;
      margin-top: 20px;
      margin-bottom: 10px;
      color: #333;
    }

    p {
      margin-bottom: 10px;
      text-align: justify;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin: 15px 0;
      font-size: 10pt;
    }

    th, td {
      border: 1px solid #e5e5e5;
      padding: 10px;
      text-align: left;
    }

    th {
      background-color: #f5f5f5;
      font-weight: 600;
    }

    tr:nth-child(even) {
      background-color: #fafafa;
    }

    .metric-box {
      background: #f5f5f5;
      border-left: 4px solid #0066cc;
      padding: 15px;
      margin: 15px 0;
    }

    .metric-box h4 {
      font-size: 12pt;
      margin-bottom: 5px;
      color: #0066cc;
    }

    .metric-box .value {
      font-size: 20pt;
      font-weight: 700;
      color: #333;
    }

    ul, ol {
      margin-left: 25px;
      margin-bottom: 10px;
    }

    li {
      margin-bottom: 5px;
    }

    .footer {
      margin-top: 50px;
      padding-top: 20px;
      border-top: 1px solid #e5e5e5;
      text-align: center;
      font-size: 9pt;
      color: #666;
    }

    @page {
      margin: 0.5in;
    }

    @media print {
      .header {
        -webkit-print-color-adjust: exact;
        print-color-adjust: exact;
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <img src="/propstrategylogo.png" alt="PropStrategy AI" class="logo" onerror="this.style.display='none'">
    <div>
      <h1>Property Investment Analysis</h1>
      <div class="subtitle">${reportData.propertyAddress}, ${reportData.propertyPostcode}</div>
    </div>
  </div>
  
  <div class="container">
    <div class="metric-box">
      <h4>Purchase Price</h4>
      <div class="value">£${reportData.purchasePrice.toLocaleString()}</div>
    </div>

    <div style="display: flex; gap: 20px; margin: 20px 0;">
      <div style="flex: 1;">
        <strong>Property Type:</strong> ${formatPropertyType(reportData.propertyType)}
      </div>
      <div style="flex: 1;">
        <strong>Current Condition:</strong> ${formatCondition(reportData.condition)}
      </div>
      <div style="flex: 1;">
        <strong>Report Type:</strong> ${reportData.reportType.charAt(0).toUpperCase() + reportData.reportType.slice(1)}
      </div>
    </div>

    ${html}

    <div class="footer">
      <p>Generated by PropStrategy AI • ${new Date().toLocaleDateString('en-GB', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      })}</p>
      <p>This report is for informational purposes only and should not be considered as financial advice.</p>
    </div>
  </div>
</body>
</html>`

    await page.setContent(fullHtml, { waitUntil: 'networkidle0' })

    const pdf = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '0.5in',
        right: '0.5in',
        bottom: '0.5in',
        left: '0.5in'
      }
    })

    return Buffer.from(pdf)
  } finally {
    await browser.close()
  }
  } catch (error) {
    console.error('PDF generation failed:', error)
    // Return a simple text buffer as fallback
    const fallbackText = `
Property Analysis Report
========================

Property: ${reportData.propertyAddress}
Purchase Price: £${reportData.purchasePrice.toLocaleString()}

PDF generation temporarily unavailable.
Please contact support for assistance.

Generated: ${new Date().toLocaleDateString()}
`
    return Buffer.from(fallbackText, 'utf-8')
  }
}

function formatPropertyType(type: string): string {
  const types: Record<string, string> = {
    residential: 'Residential',
    commercial: 'Commercial',
    office: 'Office Building',
    care_home: 'Care Home',
    mixed_use: 'Mixed Use',
  }
  return types[type] || type
}

function formatCondition(condition: string): string {
  const conditions: Record<string, string> = {
    operational: 'Operational',
    vacant: 'Vacant',
    needs_renovation: 'Needs Renovation',
    derelict: 'Derelict',
  }
  return conditions[condition] || condition
}
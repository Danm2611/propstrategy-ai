// Simple PDF alternative that doesn't require Puppeteer
// This creates a basic text file with .pdf extension as a temporary solution

export async function generateSimplePDF(html: string, reportData: any): Promise<Buffer> {
  const reportText = `
PROPSTRATEGY AI - PROPERTY INVESTMENT ANALYSIS
==============================================

Property Address: ${reportData.propertyAddress}
Property Postcode: ${reportData.propertyPostcode}
Purchase Price: Â£${reportData.purchasePrice.toLocaleString()}
Property Type: ${formatPropertyType(reportData.propertyType)}
Current Condition: ${formatCondition(reportData.condition)}

ANALYSIS REPORT
===============

${stripHtmlTags(html)}

---
Generated by PropStrategy AI on ${new Date().toLocaleDateString('en-GB')}
This is a text-based report. Full PDF generation will be available soon.
`

  return Buffer.from(reportText, 'utf-8')
}

export async function generateSimpleAdvancedReport(
  reportData: any,
  analysisData: any
): Promise<Buffer> {
  const reportText = `
PROPSTRATEGY AI - ADVANCED PROPERTY ANALYSIS
============================================

Property: ${reportData.propertyAddress}
Report Type: ${reportData.reportType.toUpperCase()}

EXECUTIVE SUMMARY
================
Strategy: ${analysisData.executiveSummary?.strategy || 'Property development analysis'}
Investment Required: ${analysisData.executiveSummary?.investmentRequired || 'TBD'}
Capital Returned: ${analysisData.executiveSummary?.capitalReturned || 'TBD'}
Net Annual Income: ${analysisData.executiveSummary?.netAnnualIncome || 'TBD'}

KEY METRICS
===========
Total ROI: ${analysisData.keyMetrics?.totalROI || 'TBD'}
Net Profit: ${analysisData.keyMetrics?.netProfit || 'TBD'}
Timeline: ${analysisData.keyMetrics?.timeline || 'TBD'}
Cash Yield: ${analysisData.keyMetrics?.cashYield || 'TBD'}

FINANCIAL ANALYSIS
==================
${JSON.stringify(analysisData, null, 2)}

---
Generated by PropStrategy AI on ${new Date().toLocaleDateString('en-GB')}
This is a text-based report. Full PDF generation will be available soon.
`

  return Buffer.from(reportText, 'utf-8')
}

function formatPropertyType(type: string): string {
  const types: Record<string, string> = {
    residential: 'Residential',
    commercial: 'Commercial',
    office: 'Office Building',
    care_home: 'Care Home',
    mixed_use: 'Mixed Use',
  }
  return types[type] || type
}

function formatCondition(condition: string): string {
  const conditions: Record<string, string> = {
    operational: 'Operational',
    vacant: 'Vacant',
    needs_renovation: 'Needs Renovation',
    derelict: 'Derelict',
  }
  return conditions[condition] || condition
}

function stripHtmlTags(html: string): string {
  return html
    .replace(/<[^>]*>/g, '')
    .replace(/&nbsp;/g, ' ')
    .replace(/&amp;/g, '&')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .trim()
}